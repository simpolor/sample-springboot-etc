<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="30 seconds">

    <!-- 환경 설정 -->
    <property name="LOG_DIR" value="${user.home}/logs/app" />
    <property name="LOG_PATH" value="${LOG_DIR}/app.log"/>

    <!-- springboot 기본 로깅파일 삽입 -->
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <!-- 아래는 스프링에서 기본적으로 제공되는 파일 application.yml 파일에 영향을 받음 -->
    <!-- https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/src/main/resources/org/springframework/boot/logging/logback/file-appender.xml -->
    <!--<include resource="org/springframework/boot/logging/logback/console-appender.xml"/>--><!-- console-appender 사용시 CONSOLE로 출력 -->
    <!--<include resource="org/springframework/boot/logging/logback/ㅅ-appender.xml"/>--><!-- file-appender 사용시 FILE 출력 -->
    <!--<include resource="org/springframework/boot/logging/logback/base.xml"/>--><!-- 스프링에서 제공되는 모든 xml을 include -->

    <!-- include를 통해 환경별로 로깅 파일을 삽입해도 좋은 방법 -->
    <!-- <include resource="logback.${profile}.xml"/> -->

    <!-- 사용자가 생성한 파일 삽입 ( logback-default, logback-slack-appender.xml, .. 등 ) -->
    <include resource="logback-defaults.xml"/>
    <include resource="logback-console.xml" />
    <include resource="logback-file-appender.xml" />
    <include resource="logback-slack-appender.xml" />

    <!-- level 지정과, appender-ref를 할 경우 2가지 방식으로 출력이 가능 -->
    <logger name="event-log" level="DEBUG">
        <appender-ref ref="EVENT_QUEUE" />
        <!--<appender-ref ref="SLACK" />-->
        <appender-ref ref="ASYNC_SLACK" />
    </logger>

    <!-- 프로퍼티를 설정하여 사용 -->
    <!-- ${LOG_LEVEL}을 사용할 경우 application.properties에서 logger.log.level=INFO를 설정을 사용-->
    <!-- config name="ROOT_LOG_LEVEL" value="INFO"/ -->

    <!-- name은 package 혹은 logger name을 사용 -->
    <logger name="root" level="WARN" />
    <!--<logger name="org.springframework" level="DEBUG" />-->
    <!--<logger name="org.springframework" level="ERROR" />-->
    <!--<logger name="io.simpolor" level="DEBUG" />-->

    <!-- 모듈 이름 -->
    <!--<logger name="logging" level="DEBUG"/>-->

    <!-- 환경별로 로깅 레벨을 설정이 가능 -->
    <springProfile name="!live">
        <logger name="io.simpolor" level="DEBUG" />
        <root level="DEBUG">
            <appender-ref ref="STDOUT" />
        </root>
        <root level="ERROR">
            <appender-ref ref="ROLLING"/>
        </root>
    </springProfile>

    <springProfile name="live">
        <logger name="io.simpolor" level="ERROR" />
        <root level="ERROR">
            <appender-ref ref="ROLLING" />
        </root>
    </springProfile>

    <!-- 아래와 같은 조건을 사용 가능 -->
    <!--<springProfile name="!dev &amp; !qa &amp; !qa2"></springProfile>-->
    <!--<springProfile name="dev, qa, qa2"></springProfile>-->

</configuration>